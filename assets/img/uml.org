* Local Host Sequence Diagram
     #+begin_src plantuml :file shopify-localhost-sequence.jpeg

     actor Developer
      Developer -[#green]> "Local File System": DNS Resolution Request
      "Local File System" -[#green]> Developer: DNS Resolution Response

     Developer -[#blue]> "SSL Proxy": HTTPs Request
     "SSL Proxy" -[#blue]> "Shopify App": HTTP Request
     "Shopify App" -[#blue]> "SSL Proxy": HTTP Response
     "SSL Proxy" -[#blue]> Developer: HTTPs Response
    
   #+end_src

   #+RESULTS:
   [[file:shopify-localhost-sequence.jpeg]]

   
* Shopify AWS Architecture
  #+begin_src plantuml :file shopify-aws-architecture.jpeg
  
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!include AWSPuml/AWSCommon.puml
' Uncomment the following line to create simplified view
' !include AWSPuml/AWSSimplified.puml

!include AWSPuml/General/Users.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/SecurityIdentityCompliance/Cognito.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Containers/Fargate.puml
!include AWSPuml/Groups/VPC.puml
!include AWSPuml/Compute/ParallelCluster.puml
!include AWSPuml/NetworkingContentDelivery/ElasticLoadBalancingApplicationLoadBalancer.puml
!include AWSPuml/NetworkingContentDelivery/Route53.puml
!include AWSPuml/Containers/ElasticContainerServiceContainer3.puml
!include AWSPuml/SecurityIdentityCompliance/SecretsManager.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Containers/ElasticContainerRegistry.puml
!include AWSPuml/Containers/ElasticContainerRegistryImage.puml
!include AWSPuml/SecurityIdentityCompliance/WAF.puml

Users(shopifySources, "Shopify App Users", "user requests")
Users(shopifyDevelopers, "Shopify App Developers", "developer changes")

skinparam usecaseBorderColor Black
skinparam usecaseBackgroundColor White

rectangle "Shopify App AWS Runtime Environment" {

  DynamoDB(ddb, "Dynamo DB", "store app data")

  VPCGroup(vpc, "Virtual Private Cloud") {
    WAF(waf, "Web Application Firewall", "protects web application")
    ElasticLoadBalancingApplicationLoadBalancer(nlb, "Load Balancer", "distribute traffic")
    Fargate(cluster, "Service Cluster", "route request to individual container") 
    ElasticContainerRegistryImage(container, "Container", "handle business logic")
  }
  
  Route53(route, "DNS", "host DNS")
}

rectangle "Shopify App AWS Deployment Environment" {
   ElasticContainerRegistry(ecr, "Container Registry", "container deployment")
   SecretsManager(sm, "Secrets Manager", "store app credential")
}

shopifySources --> route
route -down-> waf
waf -right-> nlb
nlb -down-> cluster
cluster -right-> container
container -down-> ddb

shopifyDevelopers -down-> ecr
ecr -left-> container
container -right-> sm

 
  #+end_src

  #+RESULTS:
  [[file:shopify-aws-architecture.jpeg]]

  
* OpenSearchServerless
  #+begin_src plantuml :file open-search-serverless.jpeg

  !define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v17.0/dist
  !include AWSPuml/AWSCommon.puml
  !include AWSPuml/General/Users.puml
  !include AWSPuml/General/SAMLtoken.puml
  !include AWSPuml/Compute/Lambda.puml
  !include AWSPuml/Analytics/OpenSearchService.puml
  !include AWSPuml/Analytics/OpenSearchServiceOpenSearchDashboards.puml
  !include AWSPuml/SecurityIdentityCompliance/IdentityAccessManagementRole.puml

  Lambda(ingestionLambda, "Ingestion Lambda", "ingest data")
  IdentityAccessManagementRole(ingestionRole, "Document Indexing Role", allows write for collection)
  SAMLtoken(saml, "SAML Authentication Token", "granular authentication based on user group")   

  OpenSearchService(openSearch, "OpenSearchServerless","data storage and query")
  OpenSearchServiceOpenSearchDashboards(opensearchDashboard, "OpenSearchServerless Dashboards", "data exploration")

  ingestionLambda -right-> ingestionRole: Assume Role 
  ingestionLambda -down-> openSearch: Index Documents
  
  openSearch -right-> ingestionRole: Grant Write Permission
  openSearch -down-> opensearchDashboard
  opensearchDashboard --right--> saml: Grant Permission Based on User Group
  
  rectangle "Dashboard Users" as dusers {
      Users(dashboardViewer, "Federated Dashboard Viewer Group", "Dashboard view requests")
      Users(dashboardCreator, "Federated Dashboard Creator Group", "Dashboard creation requests")
      Users(dashboardAdmin, "Federated Dashboard Adminstrator Group", "Dashboard administration requests")  
  }

  dusers -right-> saml: Autenticate Identity
  dusers -up-> opensearchDashboard: Request Dashboard Activity

  #+end_src

  #+RESULTS:
  [[file:open-search-serverless.jpeg]]
