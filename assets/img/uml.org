* Local Host Sequence Diagram
     #+begin_src plantuml :file shopify-localhost-sequence.jpeg

     actor Developer
      Developer -[#green]> "Local File System": DNS Resolution Request
      "Local File System" -[#green]> Developer: DNS Resolution Response

     Developer -[#blue]> "SSL Proxy": HTTPs Request
     "SSL Proxy" -[#blue]> "Shopify App": HTTP Request
     "Shopify App" -[#blue]> "SSL Proxy": HTTP Response
     "SSL Proxy" -[#blue]> Developer: HTTPs Response
    
   #+end_src

   #+RESULTS:
   [[file:shopify-localhost-sequence.jpeg]]

   
* Shopify AWS Architecture
  #+begin_src plantuml :file shopify-aws-architecture.jpeg
  
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!include AWSPuml/AWSCommon.puml
' Uncomment the following line to create simplified view
' !include AWSPuml/AWSSimplified.puml

!include AWSPuml/General/Users.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/SecurityIdentityCompliance/Cognito.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Containers/Fargate.puml
!include AWSPuml/Groups/VPC.puml
!include AWSPuml/Compute/ParallelCluster.puml
!include AWSPuml/NetworkingContentDelivery/ElasticLoadBalancingApplicationLoadBalancer.puml
!include AWSPuml/NetworkingContentDelivery/Route53.puml
!include AWSPuml/Containers/ElasticContainerServiceContainer3.puml
!include AWSPuml/SecurityIdentityCompliance/SecretsManager.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Containers/ElasticContainerRegistry.puml
!include AWSPuml/Containers/ElasticContainerRegistryImage.puml
!include AWSPuml/SecurityIdentityCompliance/WAF.puml

Users(shopifySources, "Shopify App Users", "user requests")
Users(shopifyDevelopers, "Shopify App Developers", "developer changes")

skinparam usecaseBorderColor Black
skinparam usecaseBackgroundColor White

rectangle "Shopify App AWS Runtime Environment" {

  DynamoDB(ddb, "Dynamo DB", "store app data")

  VPCGroup(vpc, "Virtual Private Cloud") {
    WAF(waf, "Web Application Firewall", "protects web application")
    ElasticLoadBalancingApplicationLoadBalancer(nlb, "Load Balancer", "distribute traffic")
    Fargate(cluster, "Service Cluster", "route request to individual container") 
    ElasticContainerRegistryImage(container, "Container", "handle business logic")
  }
  
  Route53(route, "DNS", "host DNS")
}

rectangle "Shopify App AWS Deployment Environment" {
   ElasticContainerRegistry(ecr, "Container Registry", "container deployment")
   SecretsManager(sm, "Secrets Manager", "store app credential")
}

shopifySources --> route
route -down-> waf
waf -right-> nlb
nlb -down-> cluster
cluster -right-> container
container -down-> ddb

shopifyDevelopers -down-> ecr
ecr -left-> container
container -right-> sm

 
  #+end_src

  #+RESULTS:
  [[file:shopify-aws-architecture.jpeg]]

  
* OpenSearchServerless
  #+begin_src plantuml :file open-search-serverless.jpeg

  !define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v17.0/dist
  !include AWSPuml/AWSCommon.puml
  !include AWSPuml/General/Users.puml
  !include AWSPuml/General/SAMLtoken.puml
  !include AWSPuml/Compute/Lambda.puml
  !include AWSPuml/Analytics/OpenSearchService.puml
  !include AWSPuml/Analytics/OpenSearchServiceOpenSearchDashboards.puml
  !include AWSPuml/SecurityIdentityCompliance/IdentityAccessManagementRole.puml

  Lambda(ingestionLambda, "Ingestion Lambda", "ingest data")
  IdentityAccessManagementRole(ingestionRole, "Document Indexing Role", allows write for collection)
  SAMLtoken(saml, "SAML Authentication Token", "granular authentication based on user group")   

  OpenSearchService(openSearch, "OpenSearchServerless","data storage and query")
  OpenSearchServiceOpenSearchDashboards(opensearchDashboard, "OpenSearchServerless Dashboards", "data exploration")

  ingestionLambda -right-> ingestionRole: Assume Role 
  ingestionLambda -down-> openSearch: Index Documents
  
  openSearch -right-> ingestionRole: Grant Write Permission
  openSearch -down-> opensearchDashboard
  opensearchDashboard --right--> saml: Grant Permission Based on User Group
  
  rectangle "Dashboard Users" as dusers {
      Users(dashboardViewer, "Federated Dashboard Viewer Group", "Dashboard view requests")
      Users(dashboardCreator, "Federated Dashboard Creator Group", "Dashboard creation requests")
      Users(dashboardAdmin, "Federated Dashboard Adminstrator Group", "Dashboard administration requests")  
  }

  dusers -right-> saml: Autenticate Identity
  dusers -up-> opensearchDashboard: Request Dashboard Activity

  #+end_src

  #+RESULTS:
  [[file:open-search-serverless.jpeg]]


* Shopify MiddleWare Diagram
  #+begin_src plantuml :file shopify-middleware.jpeg
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/General/Traditionalserver.puml
!include AWSPuml/Containers/ElasticContainerRegistryImage.puml
!include AWSPuml/NetworkingContentDelivery/Route53.puml
!include AWSPuml/General/Users.puml
!include AWSPuml/SecurityIdentityCompliance/SecretsManager.puml
!include AWSPuml/Containers/ElasticContainerRegistryImage.puml

Users(shopifyUsers, "Shopify App Users", "user requests")
Users(appDevelopers, "Shopify App Developers", "configure credentials")

Traditionalserver(server, "Shopify OAuth Service", "handles App OAuth request")
ElasticContainerRegistryImage(container, "Container", "handle business logic")


SecretsManager(sm, "Secrets Manager", "store app credential")


rectangle "Mulltiple Store MiddleWare" {

 
 map ShopifyOAuthCache {
   StoreOne => OAuth Credential for Store One
   StoreTwo => OAuth Credential for Store Two
   ... => ...
   StoreN => OAuth Credential for Store N
 }
}

shopifyUsers -down-> container #line:blue;line.dotted;text:blue 
shopifyUsers -down-> container #line:green;line.dotted;text:green 
shopifyUsers -down-> container #line:grey;line.dotted;text:grey

ShopifyOAuthCache -down-> server #line:blue;line.dotted;text:blue
ShopifyOAuthCache -down-> server #line:green;line.dotted;text:green 
ShopifyOAuthCache -down-> server #line:grey;line.dotted;text:grey

container -down-> ShopifyOAuthCache #line:red;text:red : Run Time Retrieval
ShopifyOAuthCache -right-> sm #line:orange;text:orange : Build Time Retrieval

appDevelopers -up-> sm #line:violet;text:violet : Inject Credentials
appDevelopers --left--> server #line:violet;text:violet : Acquire Credentials






  #+end_src

  #+RESULTS:
  [[file:shopify-middleware.jpeg]]


* JVM TLS Architecture Diagram
    #+begin_src plantuml :file jvm-tls.jpeg
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v15.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/General/Traditionalserver.puml
!include AWSPuml/Containers/ElasticContainerRegistryImage.puml
!include AWSPuml/NetworkingContentDelivery/Route53.puml
!include AWSPuml/General/Users.puml
!include AWSPuml/SecurityIdentityCompliance/SecretsManager.puml
!include AWSPuml/Containers/ElasticContainerRegistryImage.puml
!include AWSPuml/NetworkingContentDelivery/ElasticLoadBalancing.puml



Users(serviceClientOne, "Service Client", "requests with TLS >= 1.2")
ElasticLoadBalancing(elb1, "Network Load Balancer", "traffic balancer for TLS >= 1.2")


rectangle "Legacy Client Use Case To Be Supported" {
    Users(serviceClientTwo, "Legacy Service Client", "requests with TLS < 1.2")
    ElasticLoadBalancing(elb2, "Network Load Balancer", "traffic balancer for TLS < 1.2")
}

rectangle "Server Cluster" {

   Traditionalserver(t1server, "Server", "handles request")
   Traditionalserver(t2server, "Server", "handles request")
   Traditionalserver(t3server, "Server", "handles request")
   
   rectangle "Java Virtual Machine" {
      [Socket] << JDK >>
      [Servlet] << Tomcat >>

       map "TLS Process Logic" as TLSProcess {
          TSL>=1.2 => Supported by JVM by default
          TLS<1.2 => Turned on by JVM parameter
      }

      Socket -down-> TLSProcess: TLS Processing
      TLSProcess -down-> Servlet: Forward Request
   }

   t1server -down-> Socket #line:black;text:black
   t2server -down-> Socket #line:black;text:black
   t3server -down-> Socket #line:black;text:black
}

serviceClientOne --> elb1 #line:red;text:red

elb1 --> t1server #line:red;text:red
elb1 --> t2server #line:red;text:red
elb1 --> t3server #line:red;text:red

serviceClientTwo --> elb2 #line:green;text:green

elb2 --> t1server #line:green;text:green
elb2 --> t2server #line:green;text:green
elb2 --> t3server #line:green;text:green

  #+end_src

  #+RESULTS:
  [[file:jvm-tls.jpeg]]


  
